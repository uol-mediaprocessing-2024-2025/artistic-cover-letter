import numpy
from PIL.Image import alpha_composite
from fastapi import FastAPI, UploadFile, File, Form, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse, JSONResponse
from image_processing import process_image_blur
from PIL import Image,ImageDraw,ImageFont,ImageChops
import matplotlib.pyplot as plt
import os
import time
import matplotlib.image as mpimg
import io
import uvicorn
import cv2
import numpy as np
import base64

def main():
    blank_image, letters, coordinate_x = generateText("Testing", 200)
    images = load_images_from_folder("C:/Users/Simon/Downloads/examplePhotos")
    textured_letters = []
    for index, image in enumerate(letters):
        scaled_image = scale_image_to_height(images[index], image.height, image.width)
        multiplied_image = multiply_rgb_values(image, scaled_image)
        textured_letters.append(multiplied_image)

    for index, image in enumerate(textured_letters):
        blank_image.paste(image, (coordinate_x[index], 0))

    imgplot = plt.imshow(blank_image)
    plt.show()


def load_images_from_folder(folder_path):
    images = []
    for filename in os.listdir(folder_path):
        if filename.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):  # Add more extensions if needed
            img_path = os.path.join(folder_path, filename)
            img = Image.open(img_path)
            images.append(img)
    return images

# Scales image to a certain height (given by the letters) and to a certain width.
# Written by Bing AI
def scale_image_to_height(image, target_height, target_width):
    # Calculate the aspect ratio to maintain the width proportionally
    aspect_ratio = image.width / image.height
    new_width = int(target_height * aspect_ratio)

    # Resize the image to match the target height
    resized_image = image.resize((new_width, target_height), Image.Resampling.LANCZOS)

    # Create a new blank image with the desired width and height
    centered_image = Image.new('RGB', (target_width, target_height), (0, 0, 0, 0))

    # Calculate the position to paste the resized image to center it
    x_offset = (target_width - new_width) // 2

    # Paste the resized image onto the new blank image
    centered_image.paste(resized_image, (x_offset, 0))

    # If the resized image is wider than the target width, crop the sides
    if new_width > target_width:
        centered_image = centered_image.crop((0, 0, target_width, target_height))

    return centered_image

# Multiplies RGB values of each image while maintaining alpha channel of img1.
def multiply_rgb_values(img1_alpha, img2):
    # Separate alpha channel from letters
    r1, g1, b1, alpha = img1_alpha.split()

    # Create RGB version of img1 to multiply
    img1 = img1_alpha.convert('RGB')

    # Multiply the RGB values of the images
    result_rgb = ImageChops.multiply(img1, img2)

    # Merge back alpha channel
    r, g, b = result_rgb.split()
    result_image = Image.merge('RGBA', (r, g, b, alpha))
    return result_image

def generateText(text, resolution):
    print(f"Received text: {text}")

    # More optimal Text mask code generated by Bing AI
    # Define the text and font
    font_path = r'C:\Users\System-Pc\Desktop\impact.ttf'
    font_size = resolution #70 is roughly equivalent to 72 pt on 300 DPI A4 paper, tested in Photoshop
    font = ImageFont.truetype(font_path, font_size)

    # Create a temporary image to get the size of the text
    temp_image = Image.new('RGBA', (1, 1), (0, 0, 0, 0))
    draw = ImageDraw.Draw(temp_image)
    text_bbox = draw.textbbox((0, 0), text, font=font)
    text_width = text_bbox[2] - text_bbox[0]
    text_height = text_bbox[3] - text_bbox[1]

    # Get font metrics for additional padding to avoid text cutoff
    ascent, descent = font.getmetrics()
    padding = 0 # !!! ADD descent and PADDING!!!

    # Create the final image with the size adjusted for padding
    image_width = text_width + padding * 2
    image_height = text_height + descent + padding * 2

    nextLetterX = 0

    letters = []
    coordinate_x = [0]
    blank_image = Image.new('RGBA', (image_width, image_height), (0, 0, 0, 0))

    for char in text:
        #calculate letter size
        temp_image = Image.new('RGBA', (1, 1), (0, 0, 0, 0))
        draw_temp = ImageDraw.Draw(temp_image)
        text_bbox = draw_temp.textbbox((0, 0), char, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        image = Image.new('RGBA', (text_width, image_height), (0, 0, 0, 0))
        draw = ImageDraw.Draw(image)

        #draw letter
        draw.text((0, padding - descent), char, font=font, fill="white", align="left")
        nextLetterX = nextLetterX + text_width

        #add to arrays
        coordinate_x.append(nextLetterX)
        letters.append(image)
    return blank_image, letters, coordinate_x


if __name__ == '__main__':
    main()